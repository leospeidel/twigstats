[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 twigstats authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/basic-usage.html","id":"computing-f2-statistics-from-relate-genealogies","dir":"Articles","previous_headings":"","what":"Computing f2-statistics from Relate genealogies","title":"Basic usage","text":"first use-case compute f2-statistics Relate genealogies (https://myersgroup.github.io/relate/). central function called f2_blocks_from_Relate() takes Relate output files input. Please type ?f2_blocks_from_Relate details: use example files come Twigstats package. example, population PX admixed populations P2 P3, mixture proportion 80% 20%, respectively. first calculate f2 statistics normal mutations. plug f2 statistics f4-ratio statistic computes estimate admixture proportion. can see, inferred admixture proportion 0 1 standard errors large. shows underpowered infer admixture proportions using f4-ratio statistic. Now specify twigstats cutoff 500 generations plug f4-ratio statistic: standard errors much reduced! Use argument use_muts compute f2-statistics (age-ascertained) mutations, instead branch lengths Relate genealogies. Use argument blgsize change jackknife block size Set argument transitions False exclude transitions","code":"#These lines assign file names to variables file_anc, file_mut, poplabels, file_map. #see https://myersgroup.github.io/relate/getting_started.html#Output for file formats file_anc  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.anc.gz\", package = \"twigstats\") file_mut  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.mut.gz\", package = \"twigstats\") #see https://myersgroup.github.io/relate/input_data.html for file formats poplabels <- system.file(\"sim/msprime_ad0.8_split250_1.poplabels\", package = \"twigstats\") file_map  <- system.file(\"sim/genetic_map_combined_b37_chr1.txt\", package = \"twigstats\") #recombination map (three column format) #Calculate regular f2s between all pairs of populations f2_blocks1 <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map) f4_ratio(f2_blocks1, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX      val       se #> 1   P4   P1   P2   P3   PX 1.572486 0.389674 #Now calculate f2s using a twigstats cutoff of 500 generations.  #This should give us a big power boost. f2_blocks2 <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map, t = 500) f4_ratio(f2_blocks2, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX       val         se #> 1   P4   P1   P2   P3   PX 0.7602194 0.02394849"},{"path":"/articles/basic-usage.html","id":"using-admixtools2","dir":"Articles","previous_headings":"Computing f2-statistics from Relate genealogies","what":"Using admixtools2","title":"Basic usage","text":"can now directly feed admixtools2 functions:","code":"library(admixtools) #no twigstats ascertainment f4(f2_blocks1, \"P4\", \"P3\", \"P2\", \"PX\") #> # A tibble: 1 × 8 #>   pop1  pop2  pop3  pop4        est       se      z     p #>   <chr> <chr> <chr> <chr>     <dbl>    <dbl>  <dbl> <dbl> #> 1 P4    P3    P2    PX    -0.000670 0.000698 -0.960 0.337 #with twigstats ascertainment f4(f2_blocks2, \"P4\", \"P3\", \"P2\", \"PX\") #> # A tibble: 1 × 8 #>   pop1  pop2  pop3  pop4       est        se     z         p #>   <chr> <chr> <chr> <chr>    <dbl>     <dbl> <dbl>     <dbl> #> 1 P4    P3    P2    PX    0.000572 0.0000232  24.6 8.74e-134"},{"path":"/articles/basic-usage.html","id":"computing-f2-statistics-on-age-ascertained-snps","dir":"Articles","previous_headings":"","what":"Computing f2-statistics on age-ascertained SNPs","title":"Basic usage","text":"Sometimes, prefer graft samples genealogies (e.g. due low sequencing coverage, don’t trust imputation).  Therefore, second use-case Twigstats compute f2-statistics age ascertained mutations. central function called f2_blocks_from_RelateAges() takes plink (bed/bim/fam) files mutation ages (.mut) input. Please type ?f2_blocks_from_RelateAges details: begin assigning filenames following variables. case, files stored path prefix pref. Next, compute f2-statistics normal plink format plug f4-ratio statistic estimate admixture proportion. , can see admixture proportion 0 1 standard errors large. shows lacking power using standard f-statistics approach. can now ascertain mutations age. choose cutoff 500 generations: standard errors much reduced! unable get reliable estimate without twigstats ascertainment, estimate PX carry approximately 80% P2 20% P3 ancestry twigstats. Use argument pops analyse subset populations fam change population assignment individuals Use argument blgsize change jackknife block size Set argument transitions False exclude transitions Use file_mut = “./1240k/1240k” calculate f2 statistics 1240k sites Use file_mut = “./1000G_ages/1000GP_Phase3_mask_prene_nosingle_chr1” calculate f2 statistics 1240k sites","code":"path <- paste0(system.file(\"sim/\", package = \"twigstats\"),\"/\") pref <- \"msprime_ad0.8_split250_1\" file_plink <- paste0(path,pref) #only need prefix file_mut  <- paste0(path,pref) #only need prefix (here same name as plink file but can be different) #Compute regular f2 statistics between all pairs of populations. You can use pops to only calculate f2s between specified populations. f2_blocks1 <- f2_blocks_from_RelateAges(pref = file_plink, file_mut) f4_ratio(f2_blocks1, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX     val        se #> 1   P4   P1   P2   P3   PX 1.56105 0.3807564 #Use a cutoff of 500 generations f2_blocks2 <- f2_blocks_from_RelateAges(pref = file_plink, file_mut, t = 500) f4_ratio(f2_blocks2, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX       val         se #> 1   P4   P1   P2   P3   PX 0.7817311 0.02798447"},{"path":"/articles/basic-usage.html","id":"using-admixtools2-1","dir":"Articles","previous_headings":"Computing f2-statistics on age-ascertained SNPs","what":"Using admixtools2","title":"Basic usage","text":"can now directly feed admixtools2 functions:","code":"library(admixtools) #no twigstats ascertainment f4(f2_blocks1, \"P4\", \"P3\", \"P2\", \"PX\") #> # A tibble: 1 × 8 #>   pop1  pop2  pop3  pop4        est       se      z     p #>   <chr> <chr> <chr> <chr>     <dbl>    <dbl>  <dbl> <dbl> #> 1 P4    P3    P2    PX    -0.000698 0.000723 -0.965 0.334 #with twigstats ascertainment f4(f2_blocks2, \"P4\", \"P3\", \"P2\", \"PX\") #> # A tibble: 1 × 8 #>   pop1  pop2  pop3  pop4       est        se     z        p #>   <chr> <chr> <chr> <chr>    <dbl>     <dbl> <dbl>    <dbl> #> 1 P4    P3    P2    PX    0.000600 0.0000318  18.9 2.29e-79"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Leo Speidel. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Speidel L, Skoglund P (2024). “tbd.” tbd.","code":"@Article{,   title = {tbd},   author = {Leo Speidel and Pontus Skoglund},   journal = {tbd},   year = {2024}, }"},{"path":"/index.html","id":"twigstats","dir":"","previous_headings":"","what":"Calculate f2 statistics from Relate trees for input to admixtools2","title":"Calculate f2 statistics from Relate trees for input to admixtools2","text":"Boost f-statitics power using genealogies. Compatible admixtools2. Full documentation leospeidel.com/twigstats. function described page: leospeidel.com/twigstats/reference.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate f2 statistics from Relate trees for input to admixtools2","text":"Please install package running following command R: Alternatively, clone directory (https://github.com/leospeidel/twigstats) R type","code":"library(devtools) install_github(\"leospeidel/twigstats\") library(devtools) install()"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Calculate f2 statistics from Relate trees for input to admixtools2","text":"Please see leospeidel.com/twigstats/articles/basic-usage.html.","code":""},{"path":"/reference/ExpPaintingProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","title":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","text":"function calculates proportion genome first coalescence group x. returns version coalescence group counted, one group excluded.","code":""},{"path":"/reference/ExpPaintingProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","text":"","code":"ExpPaintingProfile(file_anc, file_mut, poplabels, pops = NULL, chrs = NULL)"},{"path":"/reference/ExpPaintingProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","text":"file_anc Filename anc file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). file_mut Filename mut file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). poplabels Filename poplabels file pops (Optional) Populations data extracted. Names need match second column poplabels file chrs (Optional) Vector chromosome IDs","code":""},{"path":"/reference/ExpPaintingProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","text":"2d array dimension #groups x #groups.","code":""},{"path":"/reference/ExpPaintingProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate first coalescence copying vector for each population specified in poplabels file. — ExpPaintingProfile","text":"","code":"file_anc  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.anc.gz\", package = \"twigstats\") file_mut  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.mut.gz\", package = \"twigstats\") poplabels <- system.file(\"sim/msprime_ad0.8_split250_1.poplabels\", package = \"twigstats\")  #Calculate f2s between all pairs of populations nn_res <- ExpPaintingProfile(file_anc, file_mut, poplabels) if(require(lsei)){   pnnls(t(nn_res[c(\"P2\",\"P3\"),c(\"P1\",\"P2\",\"P3\",\"P4\"),1]),(nn_res[\"PX\",c(\"P1\",\"P2\",\"P3\",\"P4\"),1]), sum = 1)$x } #> Loading required package: lsei #> [1] 0.2898526 0.7101474"},{"path":"/reference/Painting.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromosome painting using genealogies. — Painting","title":"Chromosome painting using genealogies. — Painting","text":"function outputs first coalescence individual pre-specified group identity along genome. first coalescnece involves several copying candidates, random haplotype chosen. Output GLOBEtrotter format.","code":""},{"path":"/reference/Painting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromosome painting using genealogies. — Painting","text":"","code":"Painting(   file_anc,   file_mut,   file_map,   file_out,   poplabels,   blgsize = NULL,   pops = NULL,   chrs = NULL )"},{"path":"/reference/Painting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromosome painting using genealogies. — Painting","text":"file_anc Filename anc file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). file_mut Filename mut file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). file_map File prefix recombination map. file_out File prefix output files poplabels Filename poplabels file blgsize (Optional) SNP block size Morgan. Default 0.05 (50 cM). blgsize 100 greater, interpreted base pair distance rather centimorgan distance. pops (Optional) Populations data extracted. Names need match second column poplabels file chrs (Optional) Vector chromosome IDs","code":""},{"path":"/reference/Painting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chromosome painting using genealogies. — Painting","text":"void. Write three files idfile, paint, rec disc.","code":""},{"path":"/reference/Painting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chromosome painting using genealogies. — Painting","text":"","code":"file_anc  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.anc.gz\", package = \"twigstats\") file_mut  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.mut.gz\", package = \"twigstats\") poplabels <- system.file(\"sim/msprime_ad0.8_split250_1.poplabels\", package = \"twigstats\") file_map  <- system.file(\"sim/genetic_map_combined_b37_chr1.txt\", package = \"twigstats\")  #define populations to paint against: pops <- c(\"P1\",\"P2\",\"P3\",\"P4\")  Painting(file_anc, file_mut, file_map, file_out = \"test\", poplabels, blgsize = 1e-5)"},{"path":"/reference/PaintingNNLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","title":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","text":"function computes admixture proprtions using non-negative least squares painting profiles obtained function PaintingProfile","code":""},{"path":"/reference/PaintingNNLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","text":"","code":"PaintingNNLS(df_sum, target_pops, source_pops = NULL)"},{"path":"/reference/PaintingNNLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","text":"df_sum Output PaintingProfile target_pops Vector populations fitted source_pops (Optional) Vector putative source populations. provided, remaining populations used.","code":""},{"path":"/reference/PaintingNNLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","text":"Returns data frame admixture proportions.","code":""},{"path":"/reference/PaintingNNLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run an NNLS on genome-wide copying proportions to estimate admixture proportions. — PaintingNNLS","text":"","code":"library(dplyr)  #This path stores files precomputed using Painting(). path      <- paste0(system.file(\"test/\", package = \"twigstats\"),\"/\") prefix    <- \"test\" #prefix of files under path  #compute the painting profiles with 100 bootstrap samples and a blocksize of 5cM (5000*0.001) df <- PaintingProfile(c(paste0(path,prefix,\"_painting.txt.gz\")), paste0(path,prefix,\"_idfile.txt.gz\"), nboot = 100, blocksize = 5000) #>  [                                                  ] 0% [==================================================] 100%  #compute the NNLS to get admixture proportions df <- PaintingNNLS(df, target_pops = c(\"PX\"), source_pops = c(\"P2\",\"P3\"))  #Now you can summarize the bootstrap samples  df %>% group_by(target, POP) %>% summarize(mean_ancestry = mean(ancestry), sd_ancestry = sd(ancestry)) -> df #> `summarise()` has grouped output by 'target'. You can override using the #> `.groups` argument. print(df) #> # A tibble: 2 × 4 #> # Groups:   target [1] #>   target POP   mean_ancestry sd_ancestry #>   <chr>  <chr>         <dbl>       <dbl> #> 1 PX     P2            0.237      0.0886 #> 2 PX     P3            0.763      0.0886"},{"path":"/reference/PaintingProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute genome-wide copying proportions. — PaintingProfile","title":"Function to compute genome-wide copying proportions. — PaintingProfile","text":"function takes output function Painting computes genome-wide 'copying vectors',  .e. proportion genome copied reference population..","code":""},{"path":"/reference/PaintingProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute genome-wide copying proportions. — PaintingProfile","text":"","code":"PaintingProfile(filename_painting, filename_idfile, nboot, blocksize)"},{"path":"/reference/PaintingProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute genome-wide copying proportions. — PaintingProfile","text":"filename_painting Vector containing filenames painting profiles. Output Painting. filename_idfile Filename idfile. Output Painting. nboot Number bootstrap samples. blocksize Number blocks combine bootstrap. E.g. Painting run blgsize 1e-5 Morgans, blocksize 5000 achieve blocksize 5cM.","code":""},{"path":"/reference/PaintingProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute genome-wide copying proportions. — PaintingProfile","text":"Returns data frame copying proportions per bootstrap sample.","code":""},{"path":"/reference/PaintingProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to compute genome-wide copying proportions. — PaintingProfile","text":"","code":"#This path stores files precomputed using Painting(). path      <- paste0(system.file(\"test/\", package = \"twigstats\"),\"/\") prefix    <- \"test\" #prefix of files under path  #compute the painting profiles with 10 bootstrap samples and a blocksize of 5cM (5000*0.001) df <- PaintingProfile(c(paste0(path,prefix,\"_painting.txt.gz\")), paste0(path,prefix,\"_idfile.txt.gz\"), nboot = 10, blocksize = 5000) #>  [                                                  ] 0% [==================================================] 100% head(df) #>   POP labs         prop bootstrap #> 1  P1   P1 0.3708453182         1 #> 2  P1   P2 0.3158219567         1 #> 3  P1   P3 0.1522726132         1 #> 4  P1   P4 0.0003065363         1 #> 5  P1   PX 0.1607535756         1 #> 6  P2   P1 0.3000887354         1"},{"path":"/reference/f-statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Function implementing the F4-ratio statistic — f4_ratio","title":"Function implementing the F4-ratio statistic — f4_ratio","text":"function computes admixture proportion given five populations. population history following ((PI,P1),P2,PO) assumed, target assumed mixture proximal sources P1 P2, .e. PX = alpha*P2 + (1-alpha)*P1 function implements jackknife input data.","code":""},{"path":"/reference/f-statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function implementing the F4-ratio statistic — f4_ratio","text":"","code":"f4_ratio(f2_blocks, popO, popI, pop1, pop2, popX)  jackknife(df_jack)"},{"path":"/reference/f-statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function implementing the F4-ratio statistic — f4_ratio","text":"f2_blocks 3d array blocked f2 statistics popO Name outgroup population popI Name ingroup population pop1 Name source clusters ingroup pop2 Name source popX Name target group. data frame. Three columns called blockID, hj, Dj, storing block ID, weight block, statistic without block","code":""},{"path":"/reference/f-statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function implementing the F4-ratio statistic — f4_ratio","text":"Returns data frame admixture proportion estimates jacknifed standard errors. Returns data table columns val se.","code":""},{"path":"/reference/f-statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function implementing the F4-ratio statistic — f4_ratio","text":"","code":"#These lines assign file names to variables file_anc, file_mut, poplabels, file_map. #see https://myersgroup.github.io/relate/getting_started.html#Output for file formats file_anc  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.anc.gz\", package = \"twigstats\") file_mut  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.mut.gz\", package = \"twigstats\") #see https://myersgroup.github.io/relate/input_data.html for file formats poplabels <- system.file(\"sim/msprime_ad0.8_split250_1.poplabels\", package = \"twigstats\") file_map  <- system.file(\"sim/genetic_map_combined_b37_chr1.txt\", package = \"twigstats\") #recombination map (three column format)  #Calculate regular f2s between all pairs of populations f2_blocks1 <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map) f4_ratio(f2_blocks1, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX      val       se #> 1   P4   P1   P2   P3   PX 1.572486 0.389674  #Use a twigstats cutoff of 500 generations f2_blocks2 <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map, t = 500) f4_ratio(f2_blocks2, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\")  #>   popO popI pop1 pop2 popX       val         se #> 1   P4   P1   P2   P3   PX 0.7602194 0.02394849"},{"path":"/reference/f2_blocks_from_Relate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","title":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","text":"function calculate f2 statistics blocks prespecified size pairs populations specified poplabels file. Please refer Relate documentation input file formats (https://myersgroup.github.io/relate/). output format directly accepted admixtools R package calculate  f3, f4, f4ratio, D statistics (https://uqrmaie1.github.io/admixtools/).","code":""},{"path":"/reference/f2_blocks_from_Relate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","text":"","code":"f2_blocks_from_Relate(   file_anc,   file_mut,   poplabels,   file_map = NULL,   chrs = NULL,   blgsize = NULL,   mu = NULL,   tmin = NULL,   t = NULL,   transitions = NULL,   use_muts = NULL,   minMAF = NULL,   dump_blockpos = NULL,   apply_corr = NULL )"},{"path":"/reference/f2_blocks_from_Relate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","text":"file_anc Filename anc file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). file_mut Filename mut file. chrs specified, prefix, resulting filenames ${file_anc}_chr${chr}.anc(.gz). poplabels Filename poplabels file file_map (Optional) File prefix recombination map. needed blgsize given base-pairs, .e. blgsize > 100 chrs (Optional) Vector chromosome IDs blgsize (Optional) SNP block size Morgan. Default 0.05 (50 cM). blgsize 100 greater, interpreted base pair distance rather centimorgan distance. mu (Optional) Per base per generation mutation rate scale f2 values. Default: 1.25e-8 tmin (Optional) Minimum time cutof generations. lineages younger tmin excluded analysis. Default: t = 0. t (Optional) Time cutoff generations. Default: Inf transitions (Optional) Set FALSE exclude transition SNPs. meaningful use_muts use_muts (Optional) Calculate traditional f2 statistics using mutations mapped Relate trees. Default: false. minMAF (Optional) Minimum frequency cutoff. Default: 1 (.e. excl singletons) dump_blockpos (Optional) Filename blockpos file. apply_corr (Optional) Use small sample size correction. Default: true.","code":""},{"path":"/reference/f2_blocks_from_Relate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","text":"3d array dimension #groups x #groups x #blocks. Analogous output f2_from_geno admixtools.","code":""},{"path":"/reference/f2_blocks_from_Relate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate f2 statistics from Relate trees for pairs of populations specified in poplabels. — f2_blocks_from_Relate","text":"","code":"file_anc  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.anc.gz\", package = \"twigstats\") file_mut  <- system.file(\"sim/msprime_ad0.8_split250_1_chr1.mut.gz\", package = \"twigstats\") poplabels <- system.file(\"sim/msprime_ad0.8_split250_1.poplabels\", package = \"twigstats\") file_map  <- system.file(\"sim/genetic_map_combined_b37_chr1.txt\", package = \"twigstats\")  #Calculate f2s between all pairs of populations f2_blocks <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map) f4_ratio(f2_blocks, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX      val       se #> 1   P4   P1   P2   P3   PX 1.572486 0.389674  #Use a cutoff of 500 generations f2_blocks <- f2_blocks_from_Relate(file_anc, file_mut, poplabels, file_map, t = 500) f4_ratio(f2_blocks, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX       val         se #> 1   P4   P1   P2   P3   PX 0.7602194 0.02394849"},{"path":"/reference/f2_blocks_from_RelateAges.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","title":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","text":"function calculate f2 statistics blocks prespecified size pairs populations specified input files. Input assumed PLINK binary format https://www.cog-genomics.org/plink/1.9/formats#bed mutation ages Relate mut format https://myersgroup.github.io/relate/. output format directly accepted admixtools R package calculate  f2, f3, f4, f4ratio, D statistics (https://uqrmaie1.github.io/admixtools/).","code":""},{"path":"/reference/f2_blocks_from_RelateAges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","text":"","code":"f2_blocks_from_RelateAges(   pref,   file_mut,   blgsize = NULL,   transitions = NULL,   maxmiss = NULL,   fam = NULL,   pops = NULL,   chrs = NULL,   tmin = NULL,   t = NULL,   include_undated = NULL,   minMAF = NULL,   apply_corr = NULL,   debug_mode = 0L )"},{"path":"/reference/f2_blocks_from_RelateAges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","text":"pref Prefix PLINK binary files, assuming filenames form ${pref}.bed, ${pref}.bim, $pref.fam. file_mut (Optional) Prefix filenames mut files, assuming filenames form ${file_mut}_chr1.mut(.gz). Chromosome names consistent PLINK files. file specified, mutations PLINK file used. blgsize (Optional) SNP block size Morgan. Default 0.05 (50 cM). blgsize 100 greater, interpreted base pair distance rather centimorgan distance. transitions (Optional) Set FALSE exclude transition SNPs maxmiss (Optional) Discard SNPs missing fraction populations higher $B!F(Bmaxmiss fam (Optional) 1d-array assigning individuals populations. Corresponds first column fam file useful want change population assignments. pops (Optional) Populations data extracted. Names need match first column fam file (fam option ) chrs (Optional) List chromosome names use. tmin (Optional) Minimum time cutof generations. mutations younger tmin excluded analysis. Default: t = 0. t (Optional) Time cutoff generations. mutations older t excluded analysis. Default: t = Inf. include_undated (Optional) Include mutations dated. Default: false. minMAF (Optional) minimum minor allele count. Default: 1. apply_corr (Optional) Use small sample size correction. Default: true. debug_mode (Optional) Prints progress used debugging.","code":""},{"path":"/reference/f2_blocks_from_RelateAges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","text":"3d array dimension #groups x #groups x #blocks containing f2 statistics. Analogous output f2_from_geno admixtools.","code":""},{"path":"/reference/f2_blocks_from_RelateAges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate f2 statistics from plink files, ascertained using mutation ages in Relate trees. — f2_blocks_from_RelateAges","text":"","code":"path <- paste0(system.file(\"sim/\", package = \"twigstats\"),\"/\") pref <- \"msprime_ad0.8_split250_1\" file_plink <- paste0(path,pref) #only need prefix file_mut  <- paste0(path,pref) #only need prefix (here same name as plink file but can be different)  #Compute f2 statistics between all pairs of populations. You can use pops to only calculate f2s between specified populations. f2_blocks <- f2_blocks_from_RelateAges(pref = file_plink, file_mut) f4_ratio(f2_blocks, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX     val        se #> 1   P4   P1   P2   P3   PX 1.56105 0.3807564  #Use a cutoff of 500 generations f2_blocks <- f2_blocks_from_RelateAges(pref = file_plink, file_mut, t = 500) f4_ratio(f2_blocks, popX=\"PX\", popI=\"P1\", pop1=\"P2\", pop2=\"P3\", popO=\"P4\") #>   popO popI pop1 pop2 popX       val         se #> 1   P4   P1   P2   P3   PX 0.7817311 0.02798447"},{"path":"/reference/f4_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"F4-ratio — f4_ratio","title":"F4-ratio — f4_ratio","text":"function computes admixture proportion given five populations. population history following ((PI,P1),P2,PO) assumed, target assumed mixture proximal sources P1 P2, .e. PX = alpha*P2 + (1-alpha)*P1","code":""},{"path":"/reference/f4_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"F4-ratio — f4_ratio","text":"","code":"f4_ratio(f2_blocks, popO, popI, pop1, pop2, popX)"},{"path":"/reference/f4_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"F4-ratio — f4_ratio","text":"f2_blocks. 3d array blocked f2 statistics popO. Name outgroup population popI. Name ingroup population pop1. Name source clusters ingroup pop2. Name source popX. Name target group.","code":""},{"path":"/reference/f4_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"F4-ratio — f4_ratio","text":"Returns data frame admixture proportion estimates jacknifed standard errors.","code":""},{"path":"/reference/jackknife.html","id":null,"dir":"Reference","previous_headings":"","what":"Jackknife — jackknife","title":"Jackknife — jackknife","text":"function implements jackknife input data.","code":""},{"path":"/reference/jackknife.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jackknife — jackknife","text":"","code":"jackknife(df_jack)"},{"path":"/reference/jackknife.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jackknife — jackknife","text":"data frame. Three columns called blockID, hj, Dj, storing block ID, weight block, statistic without block","code":""},{"path":"/reference/jackknife.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jackknife — jackknife","text":"Returns data table columns val se.","code":""},{"path":"/reference/theoretical_zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute a theoretical z-score given source split times and admixture proportions. — theoretical_zscore","title":"Function to compute a theoretical z-score given source split times and admixture proportions. — theoretical_zscore","text":"function computes theoretical z-score f4-statistic form f4(PO,P2,PX,P1)  function admixture time , source (P1 & P2) split time s, admixture proportion alpha.  assumes single lineage sampled population.","code":""},{"path":"/reference/theoretical_zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute a theoretical z-score given source split times and admixture proportions. — theoretical_zscore","text":"","code":"theoretical_zscore(t, a, s, alpha)"},{"path":"/reference/theoretical_zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute a theoretical z-score given source split times and admixture proportions. — theoretical_zscore","text":"t Twigstats cutoff time units 2Ne generations Admixture time units 2Ne generations s Source split time units 2Ne generations alpha Admixture proportions. Proportion P2 PX.","code":""},{"path":"/reference/theoretical_zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute a theoretical z-score given source split times and admixture proportions. — theoretical_zscore","text":"Returns theoretical z-score value.","code":""}]
